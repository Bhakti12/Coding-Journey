/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) 
    {
        ListNode* slow = head;
        ListNode* fast = head;
        //ALL WE HAVE TO DO IS JUST REVERSE THE LINKED LIST BEHIND THE SLOW POINTER
        ListNode* p=NULL;
        ListNode* temp = head;
        if(head==NULL){
            return true;
        }
        while(fast!=NULL and fast->next!=NULL){ // TC HERE IS O(N/2)
            fast=fast->next->next;
            temp=slow;
            slow=slow->next;
            temp->next=p;
            p=temp;
        }
        if(fast!=NULL and fast->next==NULL){ // THIS IS THE CASE WHEN WE HAVE AN ODD SIZE LINKED LIST 
            //AND WHEN FAST->NEXT IS EQUAL TO NULL OUR SLOW POINTER WILL BE AT THE MIDDLE ELEMENT SO 
            // WE JUST HAVE TO MOVE THE SLOW POINTER TO IT'S NEXT POSITION   
            slow=slow->next;
        }
        while(slow!=NULL and p!=NULL){ // TC HERE IS AGAIN O(N/2)
            if(slow->val!=p->val){
                return false;
            }
            slow=slow->next;
            p=p->next;
        }
        return true;        
    }
};
