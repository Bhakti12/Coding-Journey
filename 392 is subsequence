class Solution {
public:
    bool isSubsequence(string s, string t) 
    {
        int x = s.size();
        int y = t.size();
        if(x>y)//when first string is greter then second one
        {
            return false;
        }
        int j=0;//pointer on string s
        for(int i=0;i<y && j<x;i++)//simply traverse s and t string compare current character of s with first unmatched char of t, if matched then move ahead in s.
        {
            if(t[i]==s[j])
            {
                j++;
            }
        }
        if(j==x) return true;
        return false;
    }
};

using memoaization (DP top-sown approach) : 

class Solution {
public:
    
    // returns the length of longest common subsequence
    int isSubs(string& s1, string& s2, int i , int j,vector<vector<int>> &t)
    {
        if(i == 0 || j == 0)
            return 0;
        if(t[i][j] != -1)
            return t[i][j];
        if(s1[i-1] == s2[j-1])
            return t[i][j] = 1 + isSubs(s1,s2,i-1,j-1,t);
        else
            return t[i][j] = isSubs(s1,s2,i,j-1,t);
    }
    
    
    bool isSubsequence(string s1, string s2) {
        int m = s1.length();
        int n = s2.length();
        
        // intialising dp matrix with -1
        
        if(m >  n)
            return false;
        
        vector<vector<int>> t(m+1,vector<int> (n+1,-1));
    
        if(isSubs(s1,s2,m,n,t) == m)
            return true;
        return false;
    }
};

recursive implementation : 

class Solution {
public:
    
    bool isSubs(string& s, string& t, int m, int n)
    {
        if(m == 0)
            return true;
        if(n == 0)
            return false;
        
        // If last characters of two
        // strings are matching
        if (s[m - 1] == t[n - 1])
            return isSubs(s, t, m - 1, n - 1);
 
        // If last characters are
        // not matching
        return isSubs(s, t, m, n - 1);
    }
    
    
    bool isSubsequence(string s, string t) {
        
       if( isSubs(s,t,s.length(),t.length()))
           return true;
        
        return false;
        
    }
};
