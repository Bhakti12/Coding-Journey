/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) 
    {
            //first approach : using hashmap traverse whole linkde listt if any head points to previous any node then it returns it.
        //optimized method : toroise method slow and fast pointer slow points 1 step and fast points 2 step then if slow and fast pointer points equal node then detect cycle in linked list.
        if(head==NULL || head->next==NULL)
        {
            return false;
        }
        ListNode *slow=head;
        ListNode *fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            fast=fast->next->next;
            slow=slow->next;
            if(fast==slow)
            {
                return true;
            }
        }
        return false;
    }
};
