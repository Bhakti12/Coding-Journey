class Solution {
public:
    vector<int> countBits(int n) 
    {
        //if n = 2 then 0,1,2 and their binary representation 0=00,1=001,2=010 so the final output is [0,1,1].
        //so our goal is to return the number of binary representation of fiven array number.
        //in bruteforce approach(nlogn) : for every number it will be moduled by 2 and answer come 1 then it added when it is 0 then stopped like we module 3 with 2 = 1 then 1 with 2 = 1 so the answer for 3 is 2.because 3=011.
        //when we have more then 3 bits then there is pattern which has 1 in their second place of binary representation so there is 0 for 4 1 for 5 like below
        /* 0 = 0
        1=1
        2=1
        3=2
        4=0
        5=1
        6=1
        7=2
    }*/
        vector<int>dp(n+1);
        
        // using stl __builtin_popcount to count the set bits 
        
        // for(int i=0;i<=n;i++){
        //     ans.push_back(__builtin_popcount(i));
        // }
        // return ans;
        
        
        // ANother approach 0(n) by observing a particular pattern
        
        // 0 --> 0
        // 1---> 1
        // 2---> 1
        // 3---> 2
        // 4--->1
        // 5--->2
        // 6--->2
        // 7--->3
        // 8--->1
        
        // we can see that for numbers which is a power of 2 always  has 1 set bit 
        // for other numbers we can see that if the number is even then set bits will be equal to 
        // set bits in the number half of itself
        // main reason is beacause even numbers have always have last bit or lsb as 0;
        // say 2--> 10  --> 1 set bit
        // divide by 2 2/2 =1 --> 01 --> 1 set bit
        // say 6 -->110 --> 2 set bit
        // divide by 2 6/2 =3 ---> 011 --> 2 set bit
        
        // consider an odd number 
        // 7 --> 111 ---> set bits =3
        // 7/2 ---> 3---> 011 ---> 2 set bits === 3-1 =2 set bits
        // as lsb is 1 for odd number so dividing by 2 means right shidt by 1 
        // 111---> 011 (1 bit shifted)
        
        
        dp[0]=0;
        for(int i=1;i<=n;i++){
            if((i&(i-1))==0){
                dp[i]=1;
            }
            else{
                if(i%2==0) dp[i]=dp[i/2];
                else dp[i]=dp[i/2]+1;
            }
        }
        return dp;
    }
};
