class Solution {
public:
    /*Find first occurence of target using simple binary search like we usually do
take l = 0 and h = nums.size()-1
untill l<=h we first take mid = l+(h-l)/2
and perform binary search
When nums[mid] == target
There are two possibilities, target can be before mid and target can be after mid
So we go backwards untill we find target and store that index in low
We go forward untill we find target and store that index in high*/
vector<int> searchRange(vector<int>& nums, int target) {
        int l = 0, h = nums.size()-1;
        
        while(l <= h){
            
            int mid = l + (h-l)/2;
            
            if(nums[mid] == target) {
                int low = mid;
                while(low >= 0 && nums[low] == target){
                    low--;
                }
                
                int high = mid;
                
                while(high <= nums.size()-1 && nums[high] == target){
                    high++;
                }
                
                return {low+1, high-1};
            }
            else if(nums[mid] < target) l = mid+1;
            else h = mid-1;
            
        }
        
        return {-1, -1};
    }
};
