/*
* explanations in detail:
* https://leetcode.com/problems/n-queens/discuss/2110265/c-easy-undestanding-solution-explained-in-detail
* 
* CONSTRAINTS for valid check:
* .  .  .  .                                                          n  .  l  .
* .  .  .  .  -> a 4 * 4 matrix  ->  assume current position is(2,1): .  n  l  p  -> it's a 3 * 4 matrix when checking (2,1)
* .  .  .  .                                                          .  .  c  .
* .  .  .  . 
* use 'n' to denote negative diagonal, 'p' for positive diagonal, 'l' for the same column  
*
* the CONSTRAINTS will be:
* (1) only one "Queen" in one column:
*     for(int i = 0; i<current_row; ++i)  // because now the matrix's size is only current_row * ncols
*         if(board[i][c] == 'Q')return false;
*
* (2) only one "Queen" in the negative diagonal:
*     while(current_row >= 0 && current_col >= 0):
*     {
*         if(board[current_row][current_col] == 'Q')return false;
*         current_row -= 1;
*         current_col -= 1;
*     }
*
* (3) only one "Queen" in the positive diagonal:
*     while(current_row >= 0 && current_col < ncols):  // here ncols = nrows = n = board.size()
*     {
*         if(board[current_row][current_col] == 'Q')return false;
*         current_row -= 1;
*         current_col += 1;
*     }
*/



class Solution {
protected:
    int total;
public:
    // if the position is valid ---------------------------------------------------------------------------------------
    bool is_valid(vector<string> &board, int r, int c)
    {
        //check column for currently established board: r rows in total
        for(int i = 0; i<r; ++i)
            if(board[i][c] == 'Q')return false;
        
        //check the negative diagonal for currently established board, row is decreasing and col too
        int x = r, y = c;  // keep r and c unchanged for other usage
        while(x>=0 && y>=0){
            if(board[x][y] == 'Q')return false;
            --x;  --y; 
        }
        
        //check the positive diagonal for currently established board, row is decreasing and col increasing
        while(r>=0 && c<board.size()){
            if(board[r][c] == 'Q')return false;
            --r; ++c;
        }
        
        //if all checks are done, return true for indicating a valid position
        return true;
    }
    // if the position is valid ---------------------------------------------------------------------------------------
    
    
    
    // backtrack solver - for one row ---------------------------------------------------------------------------------
    void backtrack(vector<string> &board, int r)
    {
        // base case: row starts from 0 and reaches the last row in the ans matirx (n*n) ------------------------------
        if(r == board.size())
        {
            ++total;  // answer + 1
            return;
        }
        
        // each possible position: (row, col(from 0 to n)) ------------------------------------------------------------
        for(int c = 0; c < board.size(); ++c)
        {
            if(is_valid(board, r, c)){  // if it's a valid position
                board[r][c] = 'Q';  // set it to 'Q'
                backtrack(board, r+1);  // search in the next row
                board[r][c] = '.';  // after searching the next row, recover the status of current position
            }   
        }
        
    }
    // backtrack solver - for one row ---------------------------------------------------------------------------------
    
    
    int totalNQueens(int n) {
        // Initialise board with all '.'
        vector<string> board(n, string(n, '.'));  // each element in board represents a possible solution
        
        // call the recursive backtrack function 
        backtrack(board, 0);
       
        // return the answer
        return total;        
    }
};

company : Adobe Amazon Apple Bloomberg ByteDance eBay Facebook Goldman Sachs Google Microsoft Nutanix Uber
