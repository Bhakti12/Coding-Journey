//using binary search
//algorithm : 
//step - 1 : initialize left and mid to zero and right to array size - 1
//step - 2 : loop until left is lower then equals to right
//step - 3 : if array element means mid is equal to target then return mid otherwise check for if target element is greater then left side goes to right side means left = mid + 1; otherwise goes to left side right = mid - 1 then return index.

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) 
    {
      //int n1 = nums.size();
        //int i;
        int left = 0,right = nums.size()-1,mid=0;
        /*for(i=0;i<n1;i++)
        {
            if(nums[i]==target)
            {
                return i;
            }*/
        while(left<=right)
        {
            mid = left+(right-left)/2;
            if(nums[mid]==target)
            {
                    return mid;
            }
            else if(nums[mid]<target)
            {
                    left = mid + 1;    
            }
            else
            {
                    right = mid - 1;   
            }
        }
        return left;
    }
};
